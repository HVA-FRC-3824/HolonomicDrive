// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.HolonomicDrive.subsystems;

import org.usfirst.frc3824.HolonomicDrive.Constants;
import org.usfirst.frc3824.HolonomicDrive.RobotMap;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.command.Subsystem;

/*
 * Forklift subsystem which uses a velocity PID followed by a position PID to move
 * the totes to the location in a smooth controlled manner.
 */
public class Forklift extends Subsystem
{
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController motor = RobotMap.forkliftMotor;
    Encoder encoder = RobotMap.forkliftEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // set the present PID mode to invalid to ensure the mode is set properly in the intialization
    static int presentPIDmode = -1;
    		
	PIDController velocityPID = new PIDController(Constants.FORKLIFT_VELOCITY_P, 
			                                      Constants.FORKLIFT_VELOCITY_I, 
			                                      Constants.FORKLIFT_VELOCITY_D, 
			                                      encoder, motor);
	
	PIDController positionPID = new PIDController(Constants.FORKLIFT_POSITION_P, 
			                                      Constants.FORKLIFT_POSITION_I, 
			                                      Constants.FORKLIFT_POSITION_D, 
			                                      encoder, motor);

	public void initDefaultCommand()
	{
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

	}
	
	public void setPIDmodeAndSetpoint(int mode, double setPoint)
	{
		// determine the PID mode
		if (mode == Constants.FORKLIFT_POSITION_MODE)
		{
			// determine if the PID mode is changing
			if (mode == presentPIDmode)
			{
				// update the position set point
				positionPID.setSetpoint(setPoint);
			}
			else  // changing from velocity PID to position PID
			{
				// disable the velocity PID
				velocityPID.disable();

				// change the mode of the encoder
		        encoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
								
				// update the position set point
				positionPID.setSetpoint(setPoint);
				
				// reset the PID error
				positionPID.reset();

				// enable the PID controller
				positionPID.enable();
			}		
		}
		
		else  // velocity PID
		{
			// determine if the PID mode is changing
			if (mode == presentPIDmode)
			{
				// update the position set point
				velocityPID.setSetpoint(setPoint);
			}
			else  // changing from position to velocity PID
			{
				// disable the position PID
				positionPID.disable();
			
				// change the mode of the encoder
				encoder.setPIDSourceParameter(PIDSourceParameter.kRate);
				 
				// update the position set point
				velocityPID.setSetpoint(setPoint);
								
				// reset the PID error
				velocityPID.reset();

				// enable the PID controller
				velocityPID.enable();
			}
		}	
		
		// remember the mode
		presentPIDmode = mode;	
	}
	
	public void setPIDvalues(int PID, double P, double I, double D)
	{
		// determine the PID parameters to set
		if (PID ==  Constants.FORKLIFT_POSITION_MODE)
		{
			positionPID.setPID(P, I, D);
		}
		else
		{
			velocityPID.setPID(P, I, D);
		}
	}
	
	public double getPosition()
	{
		return(encoder.getDistance());
	}
	
	public double getError()
	{
		double error = -1.0;
		
		// determine the PID parameters to set
		if (presentPIDmode ==  Constants.FORKLIFT_POSITION_MODE)
		{
			error = positionPID.getError();
		}
		else
		{
			error = velocityPID.getError();
		}
		
		return(error);
	}
}
