// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.HolonomicDrive.subsystems;

import org.usfirst.frc3824.HolonomicDrive.Constants;
import org.usfirst.frc3824.HolonomicDrive.RobotMap;
import org.usfirst.frc3824.HolonomicDrive.commands.ToteCaptureControl;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;

/*
 *
 */
public class ToteCapture extends Subsystem
{
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController leftWheel = RobotMap.toteCaptureLeftWheel;
    SpeedController rightWheel = RobotMap.toteCaptureRightWheel;
    SpeedController leftArm = RobotMap.toteCaptureLeftArm;
    SpeedController rightArm = RobotMap.toteCaptureRightArm;
    AnalogPotentiometer leftArmPot = RobotMap.toteCaptureLeftArmPot;
    AnalogPotentiometer rightArmPot = RobotMap.toteCaptureRightArmPot;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // distance between the two arms
    static double armDistance = 0.0;
    static double armDirection = 0.0;
    static double armLeftOffset = Constants.TOTE_CAPTURE_LEFT_ARM_OFFSET;
    static double armRightOffset = Constants.TOTE_CAPTURE_RIGHT_ARM_OFFSET;
    
	PIDController leftArmPID = new PIDController(Constants.TOTE_CAPTURE_ARM_P, 
	                                              Constants.TOTE_CAPTURE_ARM_I, 
	                                              Constants.TOTE_CAPTURE_ARM_D, 
	                                              leftArmPot, leftArm);
	
	PIDController rightArmPID = new PIDController(Constants.TOTE_CAPTURE_ARM_P,
	                                               Constants.TOTE_CAPTURE_ARM_I, 
	                                               Constants.TOTE_CAPTURE_ARM_D,
	                                               rightArmPot, rightArm);
    
	/*
	 * Method which is used to set the default command for the subsystem
	 */
	public void initDefaultCommand()
	{
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new ToteCaptureControl());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
//
//		leftArmPID.enable();
		rightArmPID.enable();
	}
	
	public void setArmDistance(double distance)
	{
		armDistance = distance;
		
		updateCaptureArmSetpoints();
	}
	
	public void setArmDirection(double direction)
	{
		armDirection = direction;
		
		updateCaptureArmSetpoints();
	}
	
	public void updateCaptureArmSetpoints()
	{
		double left, right;

		left = armDirection + armDistance  + armLeftOffset;
		right = armDirection - armDistance + armRightOffset;

		System.out.println("***********************************************************************************************************");
		System.out.println(armDirection);
		System.out.println(armDistance);
		System.out.println(armLeftOffset);
		System.out.println(left);
		
		setCaptureArmSetpoints(right, left);
	}
	
	public void setCaptureArmSetpoints(double right, double left)
	{
		leftArmPID.setSetpoint(left);
		rightArmPID.setSetpoint(right);
	}
	
	public void setCaptureMotors(double rightMotor, double leftMotor)
	{
		rightWheel.set(rightMotor);
		
		leftWheel.set(leftMotor);
	}
	
	public void setArmOffsets(double right, double left)
	{
		armRightOffset = right;
		armLeftOffset = left;
	}
}
