// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.HolonomicDrive.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Timer;

import org.usfirst.frc3824.HolonomicDrive.Robot;
import org.usfirst.frc3824.HolonomicDrive.Constants;

public class ChassisDriveStraight extends Command
{
	private Timer timer;
	private double driveDuration;
	private double drivePower;
	private double driveDirection;
	private boolean setpointSpecified = false;

	public ChassisDriveStraight()
	{
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

		timer = new Timer();

		// test values
		driveDuration = 2.0;
		drivePower = 0.5;
		driveDirection = 0.0;
	}

	public ChassisDriveStraight(double duration, double power, double direction)
	{
		// Use requires() here to declare subsystem dependencies
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

		timer = new Timer();

		driveDuration = duration;
		drivePower = power;
		driveDirection = direction;
		setpointSpecified = false;

		System.out.println("Hello");
	}

	public ChassisDriveStraight(double duration, double power,
			double direction, boolean setpointSpecifiedFlag)
	{
		// Use requires() here to declare subsystem dependencies
		// eg. requires(chassis);
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

		timer = new Timer();

		driveDuration = duration;
		drivePower = power;
		driveDirection = direction;
		setpointSpecified = setpointSpecifiedFlag;
	}

	// Called just before this Command runs the first time
	protected void initialize()
	{
		// Set the PID up for driving straight
		Robot.driveTrain.getAngleGyroController().setPID(
				Constants.DrivetrainAngleGyroControllerP,
				Constants.DrivetrainAngleGyroControllerI,
				Constants.DrivetrainAngleGyroControllerD);

		// Robot.drivetrain.resetGyro();
		if (setpointSpecified == true)
		{
			Robot.driveTrain.getAngleGyroController().setSetpoint(
					Robot.initialGyroAngle);
		} else
		{
			Robot.driveTrain.getAngleGyroController().setSetpoint(
					Robot.driveTrain.getGyroValue());
		}

		Robot.driveTrain.setDirection(driveDirection);
		Robot.driveTrain.setMagnitude(drivePower);
		Robot.driveTrain.getAngleGyroController().enable();

		//SmartDashboard.putNumber("driveDirection", driveDirection);
		//SmartDashboard.putNumber("drivePower", drivePower);
		//SmartDashboard.putNumber("driveDuration", driveDuration);

		timer.reset();
		timer.start();
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute()
	{
		// SmartDashboard Buttons
		//SmartDashboard.putNumber("PID I", Robot.driveTrain.getAngleGyroController().getError());
		SmartDashboard.putNumber("PID", Robot.driveTrain.getAngleGyroController().get());
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished()
	{
		return (timer.get() > driveDuration);
	}

	// Called once after isFinished returns true
	protected void end()
	{
		Robot.driveTrain.getAngleGyroController().disable();
		Robot.driveTrain.holonomicDrive(0, 0, 0);
		timer.stop();
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted()
	{
		this.end();
	}
}
