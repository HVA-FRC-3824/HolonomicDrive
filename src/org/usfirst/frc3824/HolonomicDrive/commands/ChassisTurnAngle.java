// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.HolonomicDrive.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc3824.HolonomicDrive.Constants;
import org.usfirst.frc3824.HolonomicDrive.Robot;

public class ChassisTurnAngle extends Command
{
	private double  degreesToTurn    = 90.0;
	private double  magnitudeToDrive =  0.0;

	public ChassisTurnAngle(double turnAngle, double magnitude)
	{
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

		// copy the turn angle from the constructor to the class local variable
		degreesToTurn    = turnAngle;
		magnitudeToDrive = magnitude;
	}

	public ChassisTurnAngle()
	{
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize()
	{
		double goToGyro = Robot.driveTrain.getGyro().getAngle() + degreesToTurn;

		// Set angle for turning
		Robot.driveTrain.getAngleGyroController().setPID(Constants.DRIVETRAIN_TURN_ANGLE_P, 
		                                                 Constants.DRIVETRAIN_TURN_ANGLE_I, 
		                                                 Constants.DRIVETRAIN_TURN_ANGLE_D);

		Robot.driveTrain.setMagnitude(magnitudeToDrive);
		
		Robot.driveTrain.getAngleGyroController().reset();
		Robot.driveTrain.getAngleGyroController().setAbsoluteTolerance(Constants.TURN_THRESHOLD);
		Robot.driveTrain.getAngleGyroController().setSetpoint(goToGyro);
		Robot.driveTrain.getAngleGyroController().enable();
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute()
	{

	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished()
	{
		// return PIDcontroller.OnTarget();
		return Math.abs(Robot.driveTrain.getAngleGyroController().getSetpoint() - 
		                Robot.driveTrain.getGyro().pidGet()) < Constants.TURN_THRESHOLD;
	}

	// Called once after isFinished returns true
	protected void end()
	{
		// disable the PID controller
		Robot.driveTrain.getAngleGyroController().disable();
		Robot.driveTrain.holonomicDrive(0.0, 0.0, 0.0);
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted()
	{
		this.end();
	}
}
