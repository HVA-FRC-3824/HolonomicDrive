// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.HolonomicDrive.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc3824.HolonomicDrive.Constants;
import org.usfirst.frc3824.HolonomicDrive.Robot;

public class ChassisTurnAngle extends Command
{
	private double degreesToTurn = 0;
	private double magnitudeToDrive = 0;
	private boolean anglePassed;

	public ChassisTurnAngle(double turnAngle, double magnitude)
	{
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

		// copy the turn angle from the constructor to the class local variable
		degreesToTurn = turnAngle;
		magnitudeToDrive = magnitude;

		// indicate that the turn angle was passed to the class through the
		// constructor
		anglePassed = true;
	}

	public ChassisTurnAngle()
	{
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

		// indicate that the turn angle was not passed to the class through the
		// constructor
		anglePassed = false;
	}

	// Called just before this Command runs the first time
	protected void initialize()
	{
		// Set angle for turning
		Robot.driveTrain.getAngleGyroController().setPID(
				Constants.DrivetrainAngleGyroControllerTurnP,
				Constants.DrivetrainAngleGyroControllerTurnI,
				Constants.DrivetrainAngleGyroControllerTurnD);

		// set the target turn position
		if (anglePassed == false)
		{
			// degreesToTurn =
			// SmartDashboard::GetNumber("Chassis Turn Angle Degrees");
			degreesToTurn = 10.0;
		}

		double goToGyro = (degreesToTurn + Robot.driveTrain.getGyro()
				.getAngle());

		// do not drive forward when turning
		Robot.driveTrain.setMagnitude(magnitudeToDrive);

		Robot.driveTrain.getAngleGyroController().reset();
		Robot.driveTrain.getAngleGyroController().setAbsoluteTolerance(
				Constants.TURN_THRESHOLD);
		Robot.driveTrain.getAngleGyroController().setSetpoint(goToGyro);
		Robot.driveTrain.getAngleGyroController().enable();
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute()
	{

	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished()
	{	
		// return PIDcontroller.OnTarget();
		return Math.abs(Robot.driveTrain.getAngleGyroController().getSetpoint()
				- Robot.driveTrain.getGyro().pidGet()) < Constants.TURN_THRESHOLD;
	}

	// Called once after isFinished returns true
	protected void end()
	{
		// disable the PID controller
		Robot.driveTrain.getAngleGyroController().disable();
		Robot.driveTrain.holonomicDrive(0.0, 0.0, 0.0);
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted()
	{
		this.end();
	}
}
